using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleTest.Indexing
{
    /// <summary>
    /// Represents a transaction generated by an indexer.
    /// Within the transaction is where you can add new items.
    /// </summary>
    public sealed class IndexerTransaction<TItem> :
        IIndexerTransaction<TItem>
    {
        #region Private field - _indexer
        private Indexer<TItem> _indexer;
        #endregion
        #region Internal constructor
        internal IndexerTransaction(Indexer<TItem> indexer)
        {
            _indexer = indexer;
        }
        #endregion
        #region Dispose
        /// <summary>
        /// Closes this transaction, doing a rollback if it was not
        /// committed.
        /// </summary>
        public void Dispose()
        {
            var indexer = _indexer;
            if (indexer != null)
            {
                _indexer = null;
                indexer._Rollback();
            }
        }
        #endregion

        #region Properties
        #region WasDisposed
        /// <summary>
        /// Gets a value indicating if this transaction was
        /// already disposed.
        /// </summary>
        public bool WasDisposed
        {
            get
            {
                return _indexer == null;
            }
        }
        #endregion

        #region Indexer
        /// <summary>
        /// Gets the Indexer that created this transaction.
        /// </summary>
        public Indexer<TItem> Indexer
        {
            get
            {
                var result = _indexer;
                if (result == null)
                    throw new ObjectDisposedException(GetType().FullName);

                return result;
            }
        }
        #endregion
        #region WasRollbackRequested
        /// <summary>
        /// Indicates if an inner transaction requested a rollback.
        /// If this is the case, you can't add any new items.
        /// </summary>
        public bool WasRollbackRequested
        {
            get
            {
                return Indexer._mustRollback;
            }
        }
        #endregion
        #endregion
        #region Methods
        #region Add
        /// <summary>
        /// Adds an item to this transaction.
        /// </summary>
        public void Add(TItem item)
        {
            if (item == null)
                throw new ArgumentNullException("item");

            var indexer = Indexer;
            if (indexer._mustRollback)
                throw new InvalidOperationException("An inner transaction requested a rollback. It is not possible to add any more items.");

            indexer._items.Add(item);
        }
        #endregion
        #region Commit
        /// <summary>
        /// Commits this transaction and makes this transaction instance useless.
        /// </summary>
        public void Commit()
        {
            var indexer = Indexer;
            _indexer = null;
            indexer._Commit();
        }
        #endregion
        #endregion

        #region Private interface implementations
        IIndexer<TItem> IIndexerTransaction<TItem>.Indexer
        {
            get
            {
                return Indexer;
            }
        }
        IIndexer IIndexerTransaction.Indexer
        {
            get
            {
                return Indexer;
            }
        }
        void IIndexerTransaction.Add(object item)
        {
            Add((TItem)item);
        }
        #endregion
    }
}
